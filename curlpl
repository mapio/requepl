#!/usr/bin/env python

# curlpl -- http repl with sessions
# Copyright (C) 2011  John Krauss
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

try:
    import requests # currently depends on requests library.  eventually curl?
    from requests.exceptions import RequestException
except ImportError:
    print "You must install the requests library to use curlpl."
    print "http://docs.python-requests.org/en/latest/user/install/#install"
    exit(0)
from functools import wraps  # wrrapppppidooooooo
import cmd
import pprint

'''This is the name of the session the user begins with.'''
DEFAULT_SESSION_NAME = 'default'

def parse_request_line(line):
    """Parse a request line.
    Returns url and request_data.
    """
    args = line.split(' ')
    args.reverse()
    url = args.pop()
    request_data = ' '.join(args)
    return url, request_data

def safe_request(func):

    """Prevent request error from killing the repl.
    """
    @wraps(func)
    def wrapped(obj, line):
        try:
            url, request_data = parse_request_line(line)
            return func(obj, url, request_data)
        except RequestException as e:
            print "Error requesting: %s" % e
        except ValueError as e:
            print "Error requesting: %s" %e

    return wrapped


class Curlpl(cmd.Cmd):
    """Curlpl provides an HTTP repl with switchable sessions.
    """

    def __init__(self):
        """Initialize Curlpl
        """
        #super(Curlpl, self).__init__('\t') # use tab for readline
        cmd.Cmd.__init__(self, '\t')
        self.sessions = {}
        self.do_session(DEFAULT_SESSION_NAME)
        self.pp = pprint.PrettyPrinter(indent=2)

        # Response defaults
        self.status_code = True
        self.headers = False
        self.content = True

    @property
    def prompt(self):
        """Generate prompt with the current session.
        """
        return "curlpl:%s$ " % self.session_name

    def _print_response(self, response):
        """Print responses from http requests consistently.
        """
        if self.status_code:
            print "Response status: %s" % response.status_code

        if self.headers:
            print "Response headers:"
            self.pp.pprint(response.headers)

        if self.content:
            print "Response content:"
            print response.content

    def do_status(self, line):
        """Toggle whether response status is displayed after a request.
        "on" to turn them on, "off" to turn them off, blank to read
        the current state.
        """
        if line.lower() == 'on':
            self.status_code = True
        elif line.lower() == 'off':
            self.status_code = False
        elif line == '':
            pass
        else:
            print 'Valid options are `on` and `off`.'

        if self.status_code:
            print "Showing response status code."
        else:
            print "Not showing response status code."

    def do_response_headers(self, line):
        """Toggle whether response headers are shown after a request.
        "on" to turn them on, "off" to turn them off, blank to read
        the current state.
        """
        if line.lower() == 'on':
            self.headers = True
        elif line.lower() == 'off':
            self.headers = False
        elif line == '':
            pass
        else:
            print 'Valid options are `on` and `off`.'

        if self.headers:
            print "Showing response headers."
        else:
            print "Not showing response headers."

    def do_content(self, line):
        """Toggle whether response content is shown after a request.
        "on" to turn them on, "off" to turn them off, blank to read
        the current state.
        """
        if line.lower() == 'on':
            self.content = True
        elif line.lower() == 'off':
            self.content = False
        elif line == '':
            pass
        else:
            print 'Valid options are `on` and `off`.'

        if self.content:
            print "Showing response content."
        else:
            print "Not showing response content."

    def do_set(self, line):
        """Set a request header for the current session.  In format
        [key] [value], where [value] will be encoded.  Displays the
        headers for this session.
        """
        args = line.split(' ')
        args.reverse()
        key = args.pop()
        value = ' '.join(args)
        if key and value:
            self.session.headers[key] = value
        else:
            print 'You must specify a key and value for the header.'
        self.do_request_headers('')

    def do_unset(self, line):
        """Unset a request header for the current session.  Displays
        the remaining headers for this session.
        """
        if(self.session.headers.has_key(line)):
            self.session.headers.pop(line)
        else:
            print "Header '%s' is not set for this session." % line
        self.do_request_headers('')

    def do_request_headers(self, line):
        """Display the current request headers for this session.
        """
        self.pp.pprint(self.session.headers)

    def do_session(self, session_name):
        """Enter a session called `session_name`.  Reenters a session
        if such a session already exists.  Without arguments, tells
        you which session you're currently in.
        """
        if session_name:
            # Use the existing session if possible.
            if self.sessions.has_key(session_name):
                self.session = self.sessions[session_name]
            else:
                self.session = requests.session()
                self.sessions[session_name] = self.session

            self.session_name = session_name

        print "In session `%s`." % self.session_name

    def do_sessions(self, line):
        """List the available sessions.
        """
        for session_name in self.sessions.iterkeys():
            print session_name

    def do_clear(self, line):
        """Clear the current session's state.
        """
        self.session = requests.session()  # should this be an
                                           # @property instead?
        self.sessions[self.session_name] = self.session

        print "Cleared session `%s`" % self.session_name

    def do_cookies(self, line):
        """Show the cookies for the current session's cookie jar.
        """
        self.pp.pprint(self.session.cookies)

    @safe_request
    def do_head(self, url, request_data):
        """Synchronously get the specified [url]
        """
        self._print_response(self.session.head(url))

    @safe_request
    def do_get(self, url, request_data):
        """Synchronously get the specified [url]
        """
        self._print_response(self.session.get(url))

    @safe_request
    def do_post(self, url, request_data):
        """Synchronously post to the specified [url].  Everything after
        is sent as encoded request data.
        """
        self._print_response(self.session.post(url,
                                               data=request_data))

    @safe_request
    def do_put(self, url, request_data):
        """Synchronously put to the specified [url].  Everything after
        is sent as encoded request data.
        """
        self._print_response(self.session.put(url,
                                              data=request_data))

    @safe_request
    def do_delete(self, url, request_data):
        """Synchronously delete the specified [url].  Everything after
        is sent as encoded request data.
        """
        self._print_response(self.session.delete(url,
                                                 data=request_data))

    def help_help(self):
        """Take `help` off the list of undocumented commands.
        """
        self.do_help('')

    def do_exit(self, line):
        """Exit Curlpl.
        """
        return True

    def do_quit(self, line):
        """Exit Curlpl.
        """
        return True

    # def do_EOF(self, line):
    #     """Exit the repl.
    #     """
    #     return True

if __name__ == '__main__':
    Curlpl().cmdloop()
