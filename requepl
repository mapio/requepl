#!/usr/bin/env python

# requepl -- http repl with sessions
# Copyright (C) 2011  John Krauss
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

try:
    import requests # currently depends on requests library.  eventually curl?
    from requests.exceptions import RequestException
except ImportError:
    print "You must install the requests library to use requepl."
    print "http://docs.python-requests.org/en/latest/user/install/#install"
    exit(0)
from functools import wraps  # wrrapppppidooooooo
import cmd
import pprint
import readline

REQUEST_HEADERS = [
    'Accept',
    'Accept-Charset',
    'Accept-Encoding',
    'Accept-Language',
    'Authorization',
    'Cache-Control',
    'Connection',
    'Cookie',
    'Content-Length',
    'Content-MD5',
    'Content-Type',
    'Date',
    'Expect',
    'From',
    'Host',
    'If-Match',
    'If-Modified-Since',
    'If-None-Match',
    'If-Range',
    'If-Unmodified-Since',
    'Max-Forwards',
    'Pragma',
    'Proxy-Authorization',
    'Range',
    'Referer',
    'TE',
    'Upgrade',
    'User-Agent',
    'Via',
    'Warning']


def parse_request_line(line):
    """Parse a request line.
    Returns url and request_data.
    """
    args = line.split(' ')
    args.reverse()
    url = args.pop()
    request_data = ' '.join(args)
    return url, request_data

def safe_request(func):

    """Prevent request error from killing the repl.
    """
    @wraps(func)
    def wrapped(obj, line):
        try:
            url, request_data = parse_request_line(line)
            return func(obj, url, request_data)
        except RequestException as e:
            print "Error requesting: %s" % e
        except ValueError as e:
            print "Error requesting: %s" %e

    return wrapped


class Requepl(cmd.Cmd):
    """Requepl provides an HTTP repl with switchable sessions.
    """

    sessions = {}
    hosts = {}
    default_session_name = 'default'
    pp = pprint.PrettyPrinter(indent=2)
    intro = "An HTTP repl with switchable sessions. Type `help` for"\
            " a list of commands."

    # Response defaults
    status_code = True
    headers = False
    content = True

    def preloop(self):
        """Initialize default session.
        """
        # OS X Lion whyyyy
        if 'libedit' in readline.__doc__:
            self.completekey = None # disable cmd.Cmd's default
                                    # complete binding
            self.old_completer = readline.get_completer()
            readline.set_completer(self.complete)
            readline.parse_and_bind("bind ^I rl_complete")

        self.do_session(self.default_session_name)

    def emptyline(self):
        """Show help on empty line.
        """
        self.do_help('help')

    def default(self, line):
        """Show help on unknown line.
        """
        print 'Unrecognized command: "%s"' % line
        self.do_help('help')

    @property
    def prompt(self):
        """Generate prompt with the current session.
        """
        return "requepl(%s:%s)> " % (self.session_name, self.hosts[self.session_name])

    def _complete(self, text, options):
        """Conveniently filter available options against supplied text
        for autocomplete.
        """
        return filter(lambda x: x.find(text) == 0, options)

    def _on_off_complete(self, text):
        """Completions with on/off.
        """
        return self._complete(text, ['on', 'off'])

    def _http_www_complete(self, text):
        """Completions with [http://[www.]].
        """
        return self._complete(text, ['http://', 'http://www.'])

    def _print_response(self, response):
        """Print responses from http requests consistently.
        """
        if self.status_code:
            print "Response status: %s" % response.status_code

        if self.headers:
            print "Response headers:"
            self.pp.pprint(response.headers)

        if self.content:
            print "Response content:"
            print response.content

    def _prepend_host(self, url):
        """Prepend the session host to the supplied url.
        """
        return self.hosts[self.session_name] + url

    def do_status(self, line):
        """
        Toggle whether response status is displayed after a request.
        `on` to turn them on, `off` to turn them off, blank to read
        the current state.
        """
        if line.lower() == 'on':
            self.status_code = True
        elif line.lower() == 'off':
            self.status_code = False
        elif line == '':
            pass
        else:
            print 'Valid options are `on` and `off`.'

        if self.status_code:
            print "Showing response status code.  `status off` to hide."
        else:
            print "Not showing response status code.  `status on` to show."

    def complete_status(self, text, line, begidx, endidx):
        return self._on_off_complete(text)

    def do_response_headers(self, line):
        """
        Toggle whether response headers are shown after a request.
        `on` to turn them on, `off` to turn them off, blank to read
        the current state.
        """
        if line.lower() == 'on':
            self.headers = True
        elif line.lower() == 'off':
            self.headers = False
        elif line == '':
            pass
        else:
            print 'Valid options are `on` and `off`.'

        if self.headers:
            print "Showing response headers. `response_headers off` to hide."
        else:
            print "Not showing response headers.  `response_headers on` to show."

    def complete_response_headers(self, text, line, begidx, endidx):
        return self._on_off_complete(text)

    def do_content(self, line):
        """
        Toggle whether response content is shown after a request.
        `on` to turn them on, `off` to turn them off, blank to read
        the current state.
        """
        if line.lower() == 'on':
            self.content = True
        elif line.lower() == 'off':
            self.content = False
        elif line == '':
            pass
        else:
            print 'Valid options are `on` and `off`.'

        if self.content:
            print "Showing response content.  `content off` to hide."
        else:
            print "Not showing response content.  `content on` to show."

    def complete_content(self, text, line, begidx, endidx):
        return self._on_off_complete(text)

    def do_set_header(self, line):
        """
        Set a request header for the current session.  In format
        [key] [value], where [value] will be encoded.  Displays the
        headers for this session.
        """
        args = line.split(' ')
        key = args.pop(0)
        value = ' '.join(args)
        if key and value:
            self.session.headers[key] = value
        else:
            print 'You must specify a key and value for the header.'
        self.do_request_headers('')

    def complete_set_header(self, text, line, begidx, endidx):
        """Provide standard headers for autocomplete.
        """
        return self._complete(text, REQUEST_HEADERS)

    def do_unset_header(self, line):
        """
        Unset a request header for the current session.  Displays
        the remaining headers for this session.
        """
        if(self.session.headers.has_key(line)):
            self.session.headers.pop(line)
        else:
            print "Header '%s' is not set for this session." % line
        self.do_request_headers('')

    def complete_unset_header(self, text, line, begidx, endidx):
        """Provide existing headers for autocomplete.
        """
        return self._complete(text, self.session.headers.keys())

    def do_request_headers(self, line):
        """Display the current request headers for this session.
        """
        self.pp.pprint(self.session.headers)

    def do_session(self, session_name):
        """
        Enter a session called [session_name].  Reenters a session
        if such a session already exists.
        """
        if session_name:
            # Use the existing session if possible.
            if self.sessions.has_key(session_name):
                self.session = self.sessions[session_name]
            else:
                self.session = requests.session()
                self.sessions[session_name] = self.session
                self.hosts[session_name] = ''

            self.session_name = session_name

    def complete_session(self, text, line, begidx, endidx):
        """Complete with an available session.
        """
        return self._complete(text, self.sessions.keys())

    def do_sessions(self, line):
        """
        List the available sessions.
        """
        for session_name in self.sessions.iterkeys():
            print session_name

    def do_clear(self, line):
        """
        Clear the current session's state.
        """
        self.session = requests.session()  # should this be an
                                           # @property instead?
        self.sessions[self.session_name] = self.session

        print "Cleared session `%s`" % self.session_name

    def do_cookies(self, line):
        """
        Show the cookies for the current session's cookie jar.
        """
        self.pp.pprint(self.session.cookies)

    def do_host(self, line):
        """
        Set a host prefix for all requests in this session.  `host`
        will remove the prefix.
        """
        if line.find(' ') != -1:
            print 'Host cannot be broken with a space.'
        else:
            self.hosts[self.session_name] = line

    def complete_host(self, text, line, begidx, endidx):
        return self._http_www_complete(text)

    @safe_request
    def do_head(self, url, request_data):
        """
        Synchronously get the specified [url]
        """
        self._print_response(self.session.head(self._prepend_host(url)))

    def complete_head(self, text, line, begidx, endidx):
        return self._http_www_complete(text)

    @safe_request
    def do_get(self, url, request_data):
        """
        Synchronously get the specified [url]
        """
        self._print_response(self.session.get(self._prepend_host(url)))

    def complete_get(self, text, line, begidx, endidx):
        return self._http_www_complete(text)

    @safe_request
    def do_post(self, url, request_data):
        """
        Synchronously post to the specified [url].  Everything after
        is sent as encoded request data.
        """
        self._print_response(self.session.post(self._prepend_host(url),
                                               data=request_data))

    def complete_post(self, text, line, begidx, endidx):
        return self._http_www_complete(text)

    @safe_request
    def do_put(self, url, request_data):
        """
        Synchronously put to the specified [url].  Everything after
        is sent as encoded request data.
        """
        self._print_response(self.session.put(self._prepend_host(url),
                                              data=request_data))

    def complete_put(self, text, line, begidx, endidx):
        return self._http_www_complete(text)

    @safe_request
    def do_delete(self, url, request_data):
        """
        Synchronously delete the specified [url].  Everything after
        is sent as encoded request data.
        """
        self._print_response(self.session.delete(self._prepend_host(url),
                                                 data=request_data))

    def complete_delete(self, text, line, begidx, endidx):
        return self._http_www_complete(text)

    def help_help(self):
        """Take `help` off the list of undocumented commands.
        """
        self.do_help('')

    def do_exit(self, line):
        """
        Exit Requepl.
        """
        return True

    def do_quit(self, line):
        """
        Exit Requepl.
        """
        return True

    # def do_EOF(self, line):
    #     """Exit the repl.
    #     """
    #     return True

if __name__ == '__main__':
    try:
        Requepl().cmdloop()
    except KeyboardInterrupt:
        print ''
